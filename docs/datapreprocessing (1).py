# -*- coding: utf-8 -*-
"""DataPreprocessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZzOTDDmQnt318_XUCu5dEsH0-yYgp_Fg
"""



"""IMPORTING THE LIBRARIES"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""IMPORTING THE DATASETS

"""

data = pd.read_csv('ACCIDENT DATASETS.csv')
df = pd.DataFrame(data)
df

df.head()

df.tail()

df.shape

df.info()

"""FINDING MISSING VALUES"""

missing_values=df.isnull().sum()
missing_values

"""PERCENTAGE OF MISSING VALUES"""

missing_percentage = df.isnull().mean() *100
print(missing_percentage)

"""HANDLING MISSING VALUES
DROPPING COLUMN WITH HIGH MISSING VALUE %
"""

threshold = 50

column_to_drop= missing_percentage[missing_percentage > threshold].index

df =df.drop(columns=column_to_drop )

print(f"Columns dropped: {list(column_to_drop)}")
df

"""FINDING AND DROPPING DUPLICATES"""

print(df.duplicated().sum())
df.drop_duplicates()

"""FILLING MISSING VALUES WITH MODE AND MEDIAN"""

df['Speed_limit'] = df['Speed_limit'].fillna(df['Speed_limit'].median())
df['Weather_Conditions'] = df['Weather_Conditions'].fillna(df['Weather_Conditions'].mode()[0])
df['Urban_or_Rural_Area'] = df['Urban_or_Rural_Area'].fillna(df['Urban_or_Rural_Area'].mode()[0])
df['Latitude'] = df['Latitude'].fillna(df['Latitude'].median())
df['Longitude'] = df['Longitude'].fillna(df['Longitude'].median())
df

missing_values=df.isnull().sum()
missing_values

"""IDENTIFYING GARBAGE VALUES"""

for i in df.select_dtypes(include ="object").columns:
     print(df[i].value_counts())
     print("***"*10)

"""Check how our day of the week is odered"""

print(df['Day_of_Week'].unique())

"""Reorder Day of the week"""

day_of_week = df['Day_of_Week']
correct_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
df['Day_of_Week'] = pd.Categorical(day_of_week, categories=correct_order, ordered=True)
df_sorted = df.sort_values('Day_of_Week')

"""Encoding our dataset using Label encoder"""

from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()

df['Accident_Severity'] = label_encoder.fit_transform(df['Accident_Severity'])
df['Urban_or_Rural_Area'] = label_encoder.fit_transform(df['Urban_or_Rural_Area'])
df['Road_Type'] = label_encoder.fit_transform(df['Road_Type'])
df['Weather_Conditions'] =label_encoder.fit_transform(df['Weather_Conditions'])
df['Light_Conditions'] = label_encoder.fit_transform(df['Light_Conditions'])
df['Road_Surface_Conditions'] = label_encoder.fit_transform(df['Road_Surface_Conditions'])
df['Day_of_Week'] = label_encoder.fit_transform(df['Day_of_Week'])
df

"""Convert 'Date' column to datetime format"""

df['Date'] = pd.to_datetime(df['Date'], dayfirst=True, errors='coerce')

#Check if there are invalid dates
if df['Date'].isnull().any():
    print("Invalid dates detected. Please check your 'Date' column.")
else:
    # Convert to numerical format (YYYYMMDD)
    df['Year'] = df['Date'].dt.year.astype(int)
    df['Month'] = df['Date'].dt.month
    df['Day'] = df['Date'].dt.day

"""Check if there are invalid times"""

df['Time'] = pd.to_datetime(df['Time'], format='%H:%M', errors='coerce')

# Check if there are invalid times
if df['Time'].isnull().any():
    print("Invalid times detected. Please check your 'Time' column.")
else:
    # Extract hour and minute
    df['Hour'] = df['Time'].dt.hour
    df['Minute'] = df['Time'].dt.minute

# Drop the original 'Date' and 'Time' columns
df.drop(columns=['Date', 'Time'], inplace=True)

print(df.head())

print("Current DataFrame columns after dropping:", df.columns.tolist())

"""SPLIT THE DATA INTO TRAINING AND TESTING SET"""

from sklearn.model_selection import train_test_split

#Target(Y)
Y = df['is_high_accident_zone']
Y

#Featutes(X-values)
X =df.drop('is_high_accident_zone',axis= 1)
X

X_train, X_test , Y_train, Y_test = train_test_split(X,Y, test_size=0.2, random_state=42)
X_train

X_test

"""FEATURE ENGINEERING"""

df['is_high_accident_zone'] = ((df['Accident_Severity'] != 0) | (df['Number_of_Casualties'] > 2)).astype(int)
df['is_high_accident_zone'].unique()
df.describe()

#Binary feature to indicate whether the accident was fatal or not
df['Is_Fatal'] = df['Accident_Severity'].apply(lambda x: 1 if x == 0 else 0)
df

print(df['Is_Fatal'].unique())

from sklearn.cluster import KMeans

coords = df[['Latitude', 'Longitude']]
kmeans = KMeans(n_clusters=5, random_state=0).fit(coords)
df['Location_Cluster'] = kmeans.labels_
df

#Indicate weather the weather is poor or good
poor_weather_conditions = ['Raining + high winds','Raining no high winds','Fog or mist','Snowing + high winds']
df['Is_Poor_Weather'] = df['Weather_Conditions'].apply(lambda x: 1 if x== 1 or x==4 or x== 7 or x==8  else 0)
df

# Create new feature based on existing Hour
df['Is_Rush_Hour'] = df['Hour'].apply(lambda x: 1 if 7 <= x <= 9 or 16 <= x <= 18 else 0)
df